// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	//Diagram 5.8
	
	//Determine A or C instruction
	//if instruction[15] = 0, A instance (load instruction into A register)
	//if instruction[15] = 1, C instance (use instruction to calculate)
	//parsed instruction: ixxaccccccdddjjj
	
	//M1
		Not(in = instruction[15], out = notopcode);
		Mux16(a = aluout, b = instruction, sel = notopcode, out = w1);
	
	//A Register
		Or(a = notopcode, b = instruction[5], out = w2);
		ARegister(in = w1, load = w2, out = Aout, out[0..14] = addressM);
	
	//M2
		Mux16(a = Aout, b = inM, sel = instruction[12], out = w3);
	
	//D Register
		And(a=instruction[15], b=instruction[4], out=w4);
		DRegister(in = aluout, load = w4, out = Dout);
	
	//ALU	
		ALU(x=Dout,y=Aout,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=aluout,zr=zrout,ng=ngout);
	
	//PC
		Not(in=ngout, out=positive);
		Not(in=zrout, out=nonzero);
		And(a=instruction[15],b=instruction[0], out=jgt);
		And(a=instruction[15], b=instruction[1], out=jeq);
		And(a=instruction[15], b=instruction[2], out=jlt);
		
		And(a=positive,b=nonzero,out=both);
		And(a=jgt, b=both, out=load1);
		And(a=jeq, b=zrout, out=load2);
		And(a=jlt, b=ngout, out=load3);
		
		Or(a=load1, b=load2, out=w5);
		Or(a=load3, b=w5, out=w6);
		
		PC(in = Aout, load = w6, inc = true, reset = reset, out[0..14] = pc);
		
	//WriteM
		And(a=instruction[15], b=instruction[3], out=writeM);
}